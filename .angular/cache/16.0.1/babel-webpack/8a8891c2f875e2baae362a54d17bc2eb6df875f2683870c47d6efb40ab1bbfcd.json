{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Patient } from './app.model';\nlet PatientComponent = class PatientComponent {\n  constructor() {\n    this.patientObj = new Patient();\n    this.patientObjs = new Array();\n    // editRow(pat: Patient) {\n    //   const index = this.patientObjs.findIndex(p => p === pat);\n    //   if (index !== -1) {\n    //     // // Update the desired properties of the patient object\n    //     // this.patientObjs[index].name = \"Updated Name\";\n    //     // this.patientObjs[index].age = 20;\n    //     this.patientObjs[index].name = prompt(\"Enter new name\", this.patientObjs[index].name)!;\n    //     this.patientObjs[index].age = parseInt(prompt(\"Enter new age\", this.patientObjs[index].age.toString())!);\n    //   }\n    // }\n  }\n\n  Update() {\n    if (this.patientObj.id == 0) {\n      //new patient\n      this.patientObj.id = this.patientObjs.length + 1;\n      this.patientObjs.push(this.patientObj);\n      this.patientObj = new Patient();\n    } else {\n      //update patient\n      this.patientObjs.forEach(element => {\n        if (element.id == this.patientObj.id) {\n          element.name = this.patientObj.name;\n          element.age = this.patientObj.age;\n          this.patientObj = new Patient();\n        }\n      });\n    }\n  }\n  Edit(patSelected) {\n    this.patientObj = new Patient();\n    this.patientObj.name = patSelected.name;\n    this.patientObj.age = patSelected.age;\n    this.patientObj.id = patSelected.id;\n  }\n  Remove(patRemoved) {\n    const index = this.patientObjs.indexOf(patRemoved);\n    if (index !== -1) {\n      this.patientObjs.splice(index, 1);\n      this.patientObj = new Patient();\n    }\n  }\n};\nPatientComponent = __decorate([Component({\n  templateUrl: './app.componentPatient.html',\n  styleUrls: ['./app.component.css']\n})], PatientComponent);\nexport { PatientComponent };","map":{"version":3,"names":["Component","Patient","PatientComponent","constructor","patientObj","patientObjs","Array","Update","id","length","push","forEach","element","name","age","Edit","patSelected","Remove","patRemoved","index","indexOf","splice","__decorate","templateUrl","styleUrls"],"sources":["C:\\Users\\genio\\OneDrive\\Documents\\FullStack training\\Angular\\hospitalproject\\src\\app\\app.componentPatient.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Patient } from './app.model';\n\n@Component({\n  templateUrl: './app.componentPatient.html',\n  styleUrls: ['./app.component.css']\n})\nexport class PatientComponent {\n  patientObj: Patient = new Patient();\n  patientObjs: Array<Patient> = new Array<Patient>();\n\n  Update() {\n    if (this.patientObj.id == 0) {\n      //new patient\n      this.patientObj.id = this.patientObjs.length + 1;\n      this.patientObjs.push(this.patientObj);\n      this.patientObj = new Patient();\n    }\n    else {\n      //update patient\n      this.patientObjs.forEach(element => {\n        if (element.id == this.patientObj.id) {\n          element.name = this.patientObj.name;\n          element.age = this.patientObj.age;\n          this.patientObj = new Patient();\n        }\n      });\n    }\n  }\n  Edit(patSelected: Patient) {\n    this.patientObj = new Patient();\n    this.patientObj.name = patSelected.name;\n    this.patientObj.age = patSelected.age;\n    this.patientObj.id = patSelected.id;\n\n\n  }\n  Remove(patRemoved: Patient) {\n    const index = this.patientObjs.indexOf(patRemoved);\n    if (index !== -1) {\n      this.patientObjs.splice(index, 1);\n      this.patientObj = new Patient();\n\n    }\n  }\n\n\n\n  // editRow(pat: Patient) {\n  //   const index = this.patientObjs.findIndex(p => p === pat);\n\n  //   if (index !== -1) {\n  //     // // Update the desired properties of the patient object\n  //     // this.patientObjs[index].name = \"Updated Name\";\n  //     // this.patientObjs[index].age = 20;\n\n  //     this.patientObjs[index].name = prompt(\"Enter new name\", this.patientObjs[index].name)!;\n  //     this.patientObjs[index].age = parseInt(prompt(\"Enter new age\", this.patientObjs[index].age.toString())!);\n  //   }\n  // }\n\n\n\n\n\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,OAAO,QAAQ,aAAa;AAMrC,IAAaC,gBAAgB,GAA7B,MAAaA,gBAAgB;EAA7BC,YAAA;IACE,KAAAC,UAAU,GAAY,IAAIH,OAAO,EAAE;IACnC,KAAAI,WAAW,GAAmB,IAAIC,KAAK,EAAW;IAuClD;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;EAOF;;EAvDEC,MAAMA,CAAA;IACJ,IAAI,IAAI,CAACH,UAAU,CAACI,EAAE,IAAI,CAAC,EAAE;MAC3B;MACA,IAAI,CAACJ,UAAU,CAACI,EAAE,GAAG,IAAI,CAACH,WAAW,CAACI,MAAM,GAAG,CAAC;MAChD,IAAI,CAACJ,WAAW,CAACK,IAAI,CAAC,IAAI,CAACN,UAAU,CAAC;MACtC,IAAI,CAACA,UAAU,GAAG,IAAIH,OAAO,EAAE;KAChC,MACI;MACH;MACA,IAAI,CAACI,WAAW,CAACM,OAAO,CAACC,OAAO,IAAG;QACjC,IAAIA,OAAO,CAACJ,EAAE,IAAI,IAAI,CAACJ,UAAU,CAACI,EAAE,EAAE;UACpCI,OAAO,CAACC,IAAI,GAAG,IAAI,CAACT,UAAU,CAACS,IAAI;UACnCD,OAAO,CAACE,GAAG,GAAG,IAAI,CAACV,UAAU,CAACU,GAAG;UACjC,IAAI,CAACV,UAAU,GAAG,IAAIH,OAAO,EAAE;;MAEnC,CAAC,CAAC;;EAEN;EACAc,IAAIA,CAACC,WAAoB;IACvB,IAAI,CAACZ,UAAU,GAAG,IAAIH,OAAO,EAAE;IAC/B,IAAI,CAACG,UAAU,CAACS,IAAI,GAAGG,WAAW,CAACH,IAAI;IACvC,IAAI,CAACT,UAAU,CAACU,GAAG,GAAGE,WAAW,CAACF,GAAG;IACrC,IAAI,CAACV,UAAU,CAACI,EAAE,GAAGQ,WAAW,CAACR,EAAE;EAGrC;EACAS,MAAMA,CAACC,UAAmB;IACxB,MAAMC,KAAK,GAAG,IAAI,CAACd,WAAW,CAACe,OAAO,CAACF,UAAU,CAAC;IAClD,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACd,WAAW,CAACgB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACjC,IAAI,CAACf,UAAU,GAAG,IAAIH,OAAO,EAAE;;EAGnC;CAsBD;AA3DYC,gBAAgB,GAAAoB,UAAA,EAJ5BtB,SAAS,CAAC;EACTuB,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EACWtB,gBAAgB,CA2D5B;SA3DYA,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}